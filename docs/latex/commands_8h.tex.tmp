\hypertarget{commands_8h}{}\section{commands.\+h File Reference}
\label{commands_8h}\index{commands.\+h@{commands.\+h}}


Contains functions related to command handling.  


{\ttfamily \#include \char`\"{}profile.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}education.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}subjects.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}vector.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}database.\+h\char`\"{}}\newline
Include dependency graph for commands.\+h\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{commands_8h_a2c23d22eba86d1b71d4246b06334e134}\label{commands_8h_a2c23d22eba86d1b71d4246b06334e134}} 
void \hyperlink{commands_8h_a2c23d22eba86d1b71d4246b06334e134}{menu\+Cmd} (void)
\begin{DoxyCompactList}\small\item\em Prints all the possible commands the user can use. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a7edd205a306ac5d4b10fcb59ed66d446}{test\+Cmd} (struct \hyperlink{structprofile}{profile} $\ast$user, const struct \hyperlink{structdatabase}{database} $\ast$db)
\begin{DoxyCompactList}\small\item\em Tests the current user for name, location, interests, qualifications and average grade. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a6545c3b6c7c100dc5599794182d1d262}{set\+Profile\+Name} (struct \hyperlink{structprofile}{profile} $\ast$user, char $\ast$name, char $\ast$$\ast$names)
\begin{DoxyCompactList}\small\item\em Sets the profile name of the user to the name given to the function. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a982a41753c33ba770cef4219ad58f6be}{get\+Valid\+Name} (char $\ast$name, char $\ast$$\ast$names)
\begin{DoxyCompactList}\small\item\em Determines whether a name has already been used, and prompts for another if that is the case. \end{DoxyCompactList}\item 
int \hyperlink{commands_8h_abf0fca70c61056067822d9ea89c315bb}{is\+Used} (char $\ast$name, char $\ast$$\ast$names, int number\+\_\+of\+\_\+names)
\begin{DoxyCompactList}\small\item\em Returns 1 if the name is used. Otherwise, it returns 0. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_ae990ed770adf61f3feae6930c670b4b2}{set\+Profile\+Location} (struct \hyperlink{structprofile}{profile} $\ast$user)
\begin{DoxyCompactList}\small\item\em Sets the region of choice in user. Saves the interest in studying in this location. \end{DoxyCompactList}\item 
const char $\ast$ \hyperlink{commands_8h_a6a8001173dac41ec9cff73bc2f449687}{region\+Name} (enum \hyperlink{region_8h_a1b9edddb3735d131c67e9e824f07c402}{region} \hyperlink{region_8h_a1b9edddb3735d131c67e9e824f07c402}{region})
\begin{DoxyCompactList}\small\item\em Return the name of the region as a string. \end{DoxyCompactList}\item 
double \hyperlink{commands_8h_a0675de5ced25dcd0a33bff5a969cb5a4}{convert\+Scale} (int initial\+\_\+value)
\begin{DoxyCompactList}\small\item\em Returns the converted value. \end{DoxyCompactList}\item 
int \hyperlink{commands_8h_a80e8587fa0795e8735052fcd8a5d3348}{valid\+Scale\+Value} (int value, int interval\+\_\+start, int interval\+\_\+end)
\begin{DoxyCompactList}\small\item\em Returns a value between interval\+\_\+start and interval\+\_\+end. If the given value outside the interval it will return the value inside the interval closest the value. The interval\+\_\+start must be less than the interval\+\_\+end. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{commands_8h_a2ac70a716c08c24874d3b7f0211577cd}\label{commands_8h_a2ac70a716c08c24874d3b7f0211577cd}} 
int \hyperlink{commands_8h_a2ac70a716c08c24874d3b7f0211577cd}{get\+Valid\+Integer} (void)
\begin{DoxyCompactList}\small\item\em Returns a valid integer given through the terminal. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a50fea5a8358d8c814cd850a80db3cc80}{set\+Profile\+Interests} (struct \hyperlink{structprofile}{profile} $\ast$user, const struct \hyperlink{structdatabase}{database} $\ast$db)
\begin{DoxyCompactList}\small\item\em Saves all interests to user as a converted value (see convert\+Scale) \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_ab720b3d60c936ee7bf09e4dbfe95290c}{set\+Profile\+Qualifications} (struct \hyperlink{structprofile}{profile} $\ast$user)
\begin{DoxyCompactList}\small\item\em Saves all the users qualifications as given by the terminal. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a2b0186aebeac8138e68f92b939df308f}{set\+Subjects} (struct \hyperlink{structprofile}{profile} $\ast$user)
\begin{DoxyCompactList}\small\item\em Sets all qualifications in user to match the enum class. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_ac6cfbd79b8c9433d34ebb80d34aa0fe0}{set\+Important\+Subjects} (struct \hyperlink{structprofile}{profile} $\ast$user)
\begin{DoxyCompactList}\small\item\em Saves all the qualifications for the important subjects. \end{DoxyCompactList}\item 
const char $\ast$ \hyperlink{commands_8h_a3c1071f77dddc5036c006f00fd6ecddf}{class\+Name\+Str} (enum class class)
\begin{DoxyCompactList}\small\item\em Returns the name as a string of a class given as an enum class. \end{DoxyCompactList}\item 
enum level \hyperlink{commands_8h_aead8522edd14dc9ebe7d457449ee1420}{level\+As\+Value} (char c)
\begin{DoxyCompactList}\small\item\em Returns the enum value of a level given as a character. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_ae0bf40f93c7a47f6e2a1f1c435f1e8ba}{set\+Other\+Subjects} (struct \hyperlink{structprofile}{profile} $\ast$user, int start, int end)
\begin{DoxyCompactList}\small\item\em Saves all the levels of the other subjects (not the important ones) \end{DoxyCompactList}\item 
\mbox{\Hypertarget{commands_8h_adcd41963684cc529e1b9aca7c634cf3c}\label{commands_8h_adcd41963684cc529e1b9aca7c634cf3c}} 
void {\bfseries choose\+From\+List} (struct \hyperlink{structprofile}{profile} $\ast$user, int interval\+\_\+start, int interval\+\_\+end)
\item 
\mbox{\Hypertarget{commands_8h_a0e876bbc19bd0882c7ae81612b013323}\label{commands_8h_a0e876bbc19bd0882c7ae81612b013323}} 
double \hyperlink{commands_8h_a0e876bbc19bd0882c7ae81612b013323}{get\+Valid\+Double} (void)
\begin{DoxyCompactList}\small\item\em Returns a valid double entered in the terminal. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a463d2075beb920d5d0892f9015365616}{eval\+Cmd} (struct \hyperlink{structprofile}{profile} $\ast$user, struct \hyperlink{structeducation}{education} $\ast$current\+\_\+education, int arg)
\begin{DoxyCompactList}\small\item\em Changes the adjustment vector for the user to approach the current education. The distance of the change is determined by the argument. \end{DoxyCompactList}\item 
struct \hyperlink{structeducation}{education} \hyperlink{commands_8h_ac3a80b3942573b9115be3f1679149b3d}{find\+Cmd} (char $\ast$arg, const struct \hyperlink{structdatabase}{database} $\ast$db)
\begin{DoxyCompactList}\small\item\em Finds and prints out the education with the exact name given as and argument. \end{DoxyCompactList}\item 
void \hyperlink{commands_8h_a39eff783b62df480e1ac2a7f8af7c643}{search\+Cmd} (char $\ast$arg, const struct \hyperlink{structdatabase}{database} $\ast$db)
\begin{DoxyCompactList}\small\item\em Finds and prints out the educations whose name contains the given argument. \end{DoxyCompactList}\item 
struct \hyperlink{structeducation}{education} \hyperlink{commands_8h_a1fcd1056e5063de02d3066a6f7a97980}{recommend\+Cmd} (struct \hyperlink{structprofile}{profile} $\ast$user, const struct \hyperlink{structdatabase}{database} $\ast$\hyperlink{structdatabase}{database})
\begin{DoxyCompactList}\small\item\em Goes trough the available educations and compares them to the user\+: Both their interests, qualifications and location are considered. \end{DoxyCompactList}\item 
int \hyperlink{commands_8h_aaf8ea3a220bfa7b0dea8e9eb190a0c35}{is\+Qualified} (struct \hyperlink{structprofile}{profile} user, struct \hyperlink{structeducation}{education} \hyperlink{structeducation}{education})
\begin{DoxyCompactList}\small\item\em Checks if the user has the subject levels required by the education. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{commands_8h_a3664cb50cde8fe29b41a48fdfd19062c}\label{commands_8h_a3664cb50cde8fe29b41a48fdfd19062c}} 
void {\bfseries print\+Education} (struct \hyperlink{structeducation}{education} \hyperlink{structeducation}{education}, const struct \hyperlink{structdatabase}{database} $\ast$db)
\item 
\mbox{\Hypertarget{commands_8h_a12372bb5c07904de12d9f02b50d2578c}\label{commands_8h_a12372bb5c07904de12d9f02b50d2578c}} 
const char $\ast$ {\bfseries get\+Region\+Name} (enum \hyperlink{region_8h_a1b9edddb3735d131c67e9e824f07c402}{region} r)
\item 
void \hyperlink{commands_8h_a4cdf4c02d44a4ede344319e782d15581}{save\+Cmd} (struct \hyperlink{structprofile}{profile} $\ast$user, struct \hyperlink{structeducation}{education} $\ast$current\+\_\+education)
\item 
\mbox{\Hypertarget{commands_8h_a7293cccfaacab40b299cd7bd14cd4153}\label{commands_8h_a7293cccfaacab40b299cd7bd14cd4153}} 
int {\bfseries get\+Index} (char edu\+\_\+array\mbox{[}E\+D\+U\+C\+A\+T\+I\+O\+N\+\_\+\+L\+I\+S\+T\+\_\+\+L\+E\+N\+G\+TH\mbox{]}\mbox{[}M\+A\+X\+\_\+\+E\+D\+U\+\_\+\+N\+A\+M\+E\+\_\+\+L\+E\+N\+G\+TH\mbox{]}, struct \hyperlink{structeducation}{education} target)
\item 
\mbox{\Hypertarget{commands_8h_a587cafc0c3549bc24409f7dce2705a16}\label{commands_8h_a587cafc0c3549bc24409f7dce2705a16}} 
int {\bfseries get\+Empty\+Index} (char edu\+\_\+array\mbox{[}E\+D\+U\+C\+A\+T\+I\+O\+N\+\_\+\+L\+I\+S\+T\+\_\+\+L\+E\+N\+G\+TH\mbox{]}\mbox{[}M\+A\+X\+\_\+\+E\+D\+U\+\_\+\+N\+A\+M\+E\+\_\+\+L\+E\+N\+G\+TH\mbox{]})
\item 
int \hyperlink{commands_8h_a582e4178a08a9332d0152f4f33fb785e}{list\+Is\+Full} (int i)
\begin{DoxyCompactList}\small\item\em A logical statement that returns a boolean value. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{commands_8h_a0db4f88ab018095150ad3c05a6b658b5}\label{commands_8h_a0db4f88ab018095150ad3c05a6b658b5}} 
void {\bfseries clear\+Buffer} (void)
\item 
\mbox{\Hypertarget{commands_8h_a79078f0bf99c54da3c6ab0ca5bfb5f8d}\label{commands_8h_a79078f0bf99c54da3c6ab0ca5bfb5f8d}} 
void {\bfseries list\+Cmd} (const struct \hyperlink{structprofile}{profile} $\ast$user)
\item 
\mbox{\Hypertarget{commands_8h_a0861d91a20da6ff8fd055560d9ab9722}\label{commands_8h_a0861d91a20da6ff8fd055560d9ab9722}} 
void {\bfseries delete\+Cmd} (struct \hyperlink{structprofile}{profile} $\ast$user, int deleted\+\_\+entry)
\item 
void \hyperlink{commands_8h_a2aa9d092a83b2bbebe018177745de0b1}{save\+Profile} (struct \hyperlink{structprofile}{profile} user)
\end{DoxyCompactItemize}


\subsection{Detailed Description}
Contains functions related to command handling. 

$<$\+Detailed esription=\char`\"{}\char`\"{} here$>$=\char`\"{}\char`\"{}$>$ 

\subsection{Function Documentation}
\mbox{\Hypertarget{commands_8h_a3c1071f77dddc5036c006f00fd6ecddf}\label{commands_8h_a3c1071f77dddc5036c006f00fd6ecddf}} 
\index{commands.\+h@{commands.\+h}!class\+Name\+Str@{class\+Name\+Str}}
\index{class\+Name\+Str@{class\+Name\+Str}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{class\+Name\+Str()}{classNameStr()}}
{\footnotesize\ttfamily const char $\ast$ class\+Name\+Str (\begin{DoxyParamCaption}\item[{enum class class}]{ }\end{DoxyParamCaption})}



Returns the name as a string of a class given as an enum class. 


\begin{DoxyParams}{Parameters}
{\em class} & The enum value the name should return for \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a0675de5ced25dcd0a33bff5a969cb5a4}\label{commands_8h_a0675de5ced25dcd0a33bff5a969cb5a4}} 
\index{commands.\+h@{commands.\+h}!convert\+Scale@{convert\+Scale}}
\index{convert\+Scale@{convert\+Scale}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{convert\+Scale()}{convertScale()}}
{\footnotesize\ttfamily double convert\+Scale (\begin{DoxyParamCaption}\item[{int}]{v }\end{DoxyParamCaption})}



Returns the converted value. 


\begin{DoxyParams}{Parameters}
{\em v} & The value to be converted \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a463d2075beb920d5d0892f9015365616}\label{commands_8h_a463d2075beb920d5d0892f9015365616}} 
\index{commands.\+h@{commands.\+h}!eval\+Cmd@{eval\+Cmd}}
\index{eval\+Cmd@{eval\+Cmd}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{eval\+Cmd()}{evalCmd()}}
{\footnotesize\ttfamily void eval\+Cmd (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{struct \hyperlink{structeducation}{education} $\ast$}]{current\+\_\+education,  }\item[{int}]{arg }\end{DoxyParamCaption})}



Changes the adjustment vector for the user to approach the current education. The distance of the change is determined by the argument. 


\begin{DoxyParams}{Parameters}
{\em current\+\_\+education} & The education currently being displayed \\
\hline
{\em user} & The profile struct whose adjustment vector is changed \\
\hline
{\em arg} & The user input argument for how much to change the adjustment vector \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_ac3a80b3942573b9115be3f1679149b3d}\label{commands_8h_ac3a80b3942573b9115be3f1679149b3d}} 
\index{commands.\+h@{commands.\+h}!find\+Cmd@{find\+Cmd}}
\index{find\+Cmd@{find\+Cmd}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{find\+Cmd()}{findCmd()}}
{\footnotesize\ttfamily struct \hyperlink{structeducation}{education} find\+Cmd (\begin{DoxyParamCaption}\item[{char $\ast$}]{arg,  }\item[{const struct \hyperlink{structdatabase}{database} $\ast$}]{db }\end{DoxyParamCaption})}



Finds and prints out the education with the exact name given as and argument. 


\begin{DoxyParams}{Parameters}
{\em arg} & The argument string which should be the name of an education \\
\hline
{\em database} & The database in which all educations are stored. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a982a41753c33ba770cef4219ad58f6be}\label{commands_8h_a982a41753c33ba770cef4219ad58f6be}} 
\index{commands.\+h@{commands.\+h}!get\+Valid\+Name@{get\+Valid\+Name}}
\index{get\+Valid\+Name@{get\+Valid\+Name}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{get\+Valid\+Name()}{getValidName()}}
{\footnotesize\ttfamily void get\+Valid\+Name (\begin{DoxyParamCaption}\item[{char $\ast$}]{name,  }\item[{char $\ast$$\ast$}]{name\+\_\+array }\end{DoxyParamCaption})}



Determines whether a name has already been used, and prompts for another if that is the case. 


\begin{DoxyParams}{Parameters}
{\em name} & The name string to be determined if it is valid \\
\hline
{\em names} & The list of names already used \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_aaf8ea3a220bfa7b0dea8e9eb190a0c35}\label{commands_8h_aaf8ea3a220bfa7b0dea8e9eb190a0c35}} 
\index{commands.\+h@{commands.\+h}!is\+Qualified@{is\+Qualified}}
\index{is\+Qualified@{is\+Qualified}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{is\+Qualified()}{isQualified()}}
{\footnotesize\ttfamily int is\+Qualified (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile}}]{user,  }\item[{struct \hyperlink{structeducation}{education} \hyperlink{structeducation}{education}}]{ }\end{DoxyParamCaption})}



Checks if the user has the subject levels required by the education. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct whose quailification is checked \\
\hline
{\em education} & The education struct with the requirements \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_abf0fca70c61056067822d9ea89c315bb}\label{commands_8h_abf0fca70c61056067822d9ea89c315bb}} 
\index{commands.\+h@{commands.\+h}!is\+Used@{is\+Used}}
\index{is\+Used@{is\+Used}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{is\+Used()}{isUsed()}}
{\footnotesize\ttfamily int is\+Used (\begin{DoxyParamCaption}\item[{char $\ast$}]{name,  }\item[{char $\ast$$\ast$}]{names,  }\item[{int}]{number\+\_\+of\+\_\+names }\end{DoxyParamCaption})}



Returns 1 if the name is used. Otherwise, it returns 0. 


\begin{DoxyParams}{Parameters}
{\em name} & The name string to be determined if has been used \\
\hline
{\em names} & The list of names already used \\
\hline
{\em number\+\_\+of\+\_\+names} & The number of names in the name list \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_aead8522edd14dc9ebe7d457449ee1420}\label{commands_8h_aead8522edd14dc9ebe7d457449ee1420}} 
\index{commands.\+h@{commands.\+h}!level\+As\+Value@{level\+As\+Value}}
\index{level\+As\+Value@{level\+As\+Value}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{level\+As\+Value()}{levelAsValue()}}
{\footnotesize\ttfamily enum level level\+As\+Value (\begin{DoxyParamCaption}\item[{char}]{c }\end{DoxyParamCaption})}



Returns the enum value of a level given as a character. 


\begin{DoxyParams}{Parameters}
{\em c} & The level as a character to be converted to enum level \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a582e4178a08a9332d0152f4f33fb785e}\label{commands_8h_a582e4178a08a9332d0152f4f33fb785e}} 
\index{commands.\+h@{commands.\+h}!list\+Is\+Full@{list\+Is\+Full}}
\index{list\+Is\+Full@{list\+Is\+Full}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{list\+Is\+Full()}{listIsFull()}}
{\footnotesize\ttfamily int list\+Is\+Full (\begin{DoxyParamCaption}\item[{int}]{i }\end{DoxyParamCaption})}



A logical statement that returns a boolean value. 


\begin{DoxyParams}{Parameters}
{\em i} & The index of an array of education structs \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a1fcd1056e5063de02d3066a6f7a97980}\label{commands_8h_a1fcd1056e5063de02d3066a6f7a97980}} 
\index{commands.\+h@{commands.\+h}!recommend\+Cmd@{recommend\+Cmd}}
\index{recommend\+Cmd@{recommend\+Cmd}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{recommend\+Cmd()}{recommendCmd()}}
{\footnotesize\ttfamily struct \hyperlink{structeducation}{education} recommend\+Cmd (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{const struct \hyperlink{structdatabase}{database} $\ast$}]{database }\end{DoxyParamCaption})}



Goes trough the available educations and compares them to the user\+: Both their interests, qualifications and location are considered. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct which is compared \\
\hline
{\em database} & The database containing the educations \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a6a8001173dac41ec9cff73bc2f449687}\label{commands_8h_a6a8001173dac41ec9cff73bc2f449687}} 
\index{commands.\+h@{commands.\+h}!region\+Name@{region\+Name}}
\index{region\+Name@{region\+Name}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{region\+Name()}{regionName()}}
{\footnotesize\ttfamily const char $\ast$ region\+Name (\begin{DoxyParamCaption}\item[{enum \hyperlink{region_8h_a1b9edddb3735d131c67e9e824f07c402}{region} \hyperlink{region_8h_a1b9edddb3735d131c67e9e824f07c402}{region}}]{ }\end{DoxyParamCaption})}



Return the name of the region as a string. 


\begin{DoxyParams}{Parameters}
{\em region} & The enum region value of the region to be returned as a string \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a4cdf4c02d44a4ede344319e782d15581}\label{commands_8h_a4cdf4c02d44a4ede344319e782d15581}} 
\index{commands.\+h@{commands.\+h}!save\+Cmd@{save\+Cmd}}
\index{save\+Cmd@{save\+Cmd}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{save\+Cmd()}{saveCmd()}}
{\footnotesize\ttfamily void save\+Cmd (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{struct \hyperlink{structeducation}{education} $\ast$}]{current\+\_\+education }\end{DoxyParamCaption})}


\begin{DoxyParams}{Parameters}
{\em $\ast$current\+\_\+education} & \\
\hline
{\em $\ast$user} & The profile of the user that has saved\+\_\+education as a member. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a2aa9d092a83b2bbebe018177745de0b1}\label{commands_8h_a2aa9d092a83b2bbebe018177745de0b1}} 
\index{commands.\+h@{commands.\+h}!save\+Profile@{save\+Profile}}
\index{save\+Profile@{save\+Profile}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{save\+Profile()}{saveProfile()}}
{\footnotesize\ttfamily void save\+Profile (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile}}]{user }\end{DoxyParamCaption})}

@ @ @ \mbox{\Hypertarget{commands_8h_a39eff783b62df480e1ac2a7f8af7c643}\label{commands_8h_a39eff783b62df480e1ac2a7f8af7c643}} 
\index{commands.\+h@{commands.\+h}!search\+Cmd@{search\+Cmd}}
\index{search\+Cmd@{search\+Cmd}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{search\+Cmd()}{searchCmd()}}
{\footnotesize\ttfamily void search\+Cmd (\begin{DoxyParamCaption}\item[{char $\ast$}]{arg,  }\item[{const struct \hyperlink{structdatabase}{database} $\ast$}]{db }\end{DoxyParamCaption})}



Finds and prints out the educations whose name contains the given argument. 


\begin{DoxyParams}{Parameters}
{\em arg} & The argument string which should be contained in the name of an education \\
\hline
{\em database} & The database in which all educations are stored. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_ac6cfbd79b8c9433d34ebb80d34aa0fe0}\label{commands_8h_ac6cfbd79b8c9433d34ebb80d34aa0fe0}} 
\index{commands.\+h@{commands.\+h}!set\+Important\+Subjects@{set\+Important\+Subjects}}
\index{set\+Important\+Subjects@{set\+Important\+Subjects}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Important\+Subjects()}{setImportantSubjects()}}
{\footnotesize\ttfamily void set\+Important\+Subjects (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user }\end{DoxyParamCaption})}



Saves all the qualifications for the important subjects. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the subjects are saved to \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_ae0bf40f93c7a47f6e2a1f1c435f1e8ba}\label{commands_8h_ae0bf40f93c7a47f6e2a1f1c435f1e8ba}} 
\index{commands.\+h@{commands.\+h}!set\+Other\+Subjects@{set\+Other\+Subjects}}
\index{set\+Other\+Subjects@{set\+Other\+Subjects}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Other\+Subjects()}{setOtherSubjects()}}
{\footnotesize\ttfamily void set\+Other\+Subjects (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{int}]{start,  }\item[{int}]{end }\end{DoxyParamCaption})}



Saves all the levels of the other subjects (not the important ones) 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the qualifications are to be saved \\
\hline
{\em start} & The start of the subjects to be asked for \\
\hline
{\em end} & The ens of the subjects to be asked for \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a50fea5a8358d8c814cd850a80db3cc80}\label{commands_8h_a50fea5a8358d8c814cd850a80db3cc80}} 
\index{commands.\+h@{commands.\+h}!set\+Profile\+Interests@{set\+Profile\+Interests}}
\index{set\+Profile\+Interests@{set\+Profile\+Interests}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Profile\+Interests()}{setProfileInterests()}}
{\footnotesize\ttfamily void set\+Profile\+Interests (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{const struct \hyperlink{structdatabase}{database} $\ast$}]{db }\end{DoxyParamCaption})}



Saves all interests to user as a converted value (see convert\+Scale) 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the interests are saved to \\
\hline
{\em db} & The database struct where information about all interests are saved as a pointer \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_ae990ed770adf61f3feae6930c670b4b2}\label{commands_8h_ae990ed770adf61f3feae6930c670b4b2}} 
\index{commands.\+h@{commands.\+h}!set\+Profile\+Location@{set\+Profile\+Location}}
\index{set\+Profile\+Location@{set\+Profile\+Location}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Profile\+Location()}{setProfileLocation()}}
{\footnotesize\ttfamily void set\+Profile\+Location (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user }\end{DoxyParamCaption})}



Sets the region of choice in user. Saves the interest in studying in this location. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the information about location should be saved \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a6545c3b6c7c100dc5599794182d1d262}\label{commands_8h_a6545c3b6c7c100dc5599794182d1d262}} 
\index{commands.\+h@{commands.\+h}!set\+Profile\+Name@{set\+Profile\+Name}}
\index{set\+Profile\+Name@{set\+Profile\+Name}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Profile\+Name()}{setProfileName()}}
{\footnotesize\ttfamily void set\+Profile\+Name (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{char $\ast$}]{name,  }\item[{char $\ast$$\ast$}]{names }\end{DoxyParamCaption})}



Sets the profile name of the user to the name given to the function. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the name should be saved to \\
\hline
{\em name} & The name string given to the function to be saved in user \\
\hline
{\em names} & The list of all names already used \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_ab720b3d60c936ee7bf09e4dbfe95290c}\label{commands_8h_ab720b3d60c936ee7bf09e4dbfe95290c}} 
\index{commands.\+h@{commands.\+h}!set\+Profile\+Qualifications@{set\+Profile\+Qualifications}}
\index{set\+Profile\+Qualifications@{set\+Profile\+Qualifications}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Profile\+Qualifications()}{setProfileQualifications()}}
{\footnotesize\ttfamily void set\+Profile\+Qualifications (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user }\end{DoxyParamCaption})}



Saves all the users qualifications as given by the terminal. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the qualifications are saved to \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a2b0186aebeac8138e68f92b939df308f}\label{commands_8h_a2b0186aebeac8138e68f92b939df308f}} 
\index{commands.\+h@{commands.\+h}!set\+Subjects@{set\+Subjects}}
\index{set\+Subjects@{set\+Subjects}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{set\+Subjects()}{setSubjects()}}
{\footnotesize\ttfamily void set\+Subjects (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user }\end{DoxyParamCaption})}



Sets all qualifications in user to match the enum class. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where the subjects are saved to \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a7edd205a306ac5d4b10fcb59ed66d446}\label{commands_8h_a7edd205a306ac5d4b10fcb59ed66d446}} 
\index{commands.\+h@{commands.\+h}!test\+Cmd@{test\+Cmd}}
\index{test\+Cmd@{test\+Cmd}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{test\+Cmd()}{testCmd()}}
{\footnotesize\ttfamily void test\+Cmd (\begin{DoxyParamCaption}\item[{struct \hyperlink{structprofile}{profile} $\ast$}]{user,  }\item[{const struct \hyperlink{structdatabase}{database} $\ast$}]{db }\end{DoxyParamCaption})}



Tests the current user for name, location, interests, qualifications and average grade. 


\begin{DoxyParams}{Parameters}
{\em user} & The profile struct where all test results should be saved \\
\hline
{\em db} & The database where information of interests and subjects are as a pointer \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{commands_8h_a80e8587fa0795e8735052fcd8a5d3348}\label{commands_8h_a80e8587fa0795e8735052fcd8a5d3348}} 
\index{commands.\+h@{commands.\+h}!valid\+Scale\+Value@{valid\+Scale\+Value}}
\index{valid\+Scale\+Value@{valid\+Scale\+Value}!commands.\+h@{commands.\+h}}
\subsubsection{\texorpdfstring{valid\+Scale\+Value()}{validScaleValue()}}
{\footnotesize\ttfamily int valid\+Scale\+Value (\begin{DoxyParamCaption}\item[{int}]{value,  }\item[{int}]{interval\+\_\+start,  }\item[{int}]{interval\+\_\+end }\end{DoxyParamCaption})}



Returns a value between interval\+\_\+start and interval\+\_\+end. If the given value outside the interval it will return the value inside the interval closest the value. The interval\+\_\+start must be less than the interval\+\_\+end. 


\begin{DoxyParams}{Parameters}
{\em value} & The value to check within the scale \\
\hline
{\em interval\+\_\+start} & The start value of the scale \\
\hline
{\em interval\+\_\+end} & The end value the scale \\
\hline
\end{DoxyParams}
